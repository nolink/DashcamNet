/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace DashcamNet.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Span : TBase
  {
    private long _sequenceNo;
    private string _route;
    private Dictionary<string, string> _attributes;
    private string _appId;
    private string _hostName;
    private long _processId;

    public string Name { get; set; }

    public string ServiceName { get; set; }

    public string HostIp { get; set; }

    /// <summary>
    /// 
    /// <seealso cref="SpanType"/>
    /// </summary>
    public SpanType SpanType { get; set; }

    public long TraceId { get; set; }

    public long SpanId { get; set; }

    public long ParentId { get; set; }

    public long StartTime { get; set; }

    public long StopTime { get; set; }

    public List<LogEvent> LogEvents { get; set; }

    public bool Unfinished { get; set; }

    public long ThreadId { get; set; }

    public long SequenceNo
    {
      get
      {
        return _sequenceNo;
      }
      set
      {
        __isset.sequenceNo = true;
        this._sequenceNo = value;
      }
    }

    public string Route
    {
      get
      {
        return _route;
      }
      set
      {
        __isset.route = true;
        this._route = value;
      }
    }

    public Dictionary<string, string> Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }

    public string AppId
    {
      get
      {
        return _appId;
      }
      set
      {
        __isset.appId = true;
        this._appId = value;
      }
    }

    public string HostName
    {
      get
      {
        return _hostName;
      }
      set
      {
        __isset.hostName = true;
        this._hostName = value;
      }
    }

    public long ProcessId
    {
      get
      {
        return _processId;
      }
      set
      {
        __isset.processId = true;
        this._processId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sequenceNo;
      public bool route;
      public bool attributes;
      public bool appId;
      public bool hostName;
      public bool processId;
    }

    public Span() {
    }

    public Span(string name, string serviceName, string hostIp, SpanType spanType, long traceId, long spanId, long parentId, long startTime, long stopTime, List<LogEvent> logEvents, bool unfinished, long threadId) : this() {
      this.Name = name;
      this.ServiceName = serviceName;
      this.HostIp = hostIp;
      this.SpanType = spanType;
      this.TraceId = traceId;
      this.SpanId = spanId;
      this.ParentId = parentId;
      this.StartTime = startTime;
      this.StopTime = stopTime;
      this.LogEvents = logEvents;
      this.Unfinished = unfinished;
      this.ThreadId = threadId;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_name = false;
      bool isset_serviceName = false;
      bool isset_hostIp = false;
      bool isset_spanType = false;
      bool isset_traceId = false;
      bool isset_spanId = false;
      bool isset_parentId = false;
      bool isset_startTime = false;
      bool isset_stopTime = false;
      bool isset_logEvents = false;
      bool isset_unfinished = false;
      bool isset_threadId = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
              isset_name = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              ServiceName = iprot.ReadString();
              isset_serviceName = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              HostIp = iprot.ReadString();
              isset_hostIp = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              SpanType = (SpanType)iprot.ReadI32();
              isset_spanType = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              TraceId = iprot.ReadI64();
              isset_traceId = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              SpanId = iprot.ReadI64();
              isset_spanId = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I64) {
              ParentId = iprot.ReadI64();
              isset_parentId = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I64) {
              StartTime = iprot.ReadI64();
              isset_startTime = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I64) {
              StopTime = iprot.ReadI64();
              isset_stopTime = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.List) {
              {
                LogEvents = new List<LogEvent>();
                TList _list5 = iprot.ReadListBegin();
                for( int _i6 = 0; _i6 < _list5.Count; ++_i6)
                {
                  LogEvent _elem7;
                  _elem7 = new LogEvent();
                  _elem7.Read(iprot);
                  LogEvents.Add(_elem7);
                }
                iprot.ReadListEnd();
              }
              isset_logEvents = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Bool) {
              Unfinished = iprot.ReadBool();
              isset_unfinished = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I64) {
              ThreadId = iprot.ReadI64();
              isset_threadId = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I64) {
              SequenceNo = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.String) {
              Route = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.Map) {
              {
                Attributes = new Dictionary<string, string>();
                TMap _map8 = iprot.ReadMapBegin();
                for( int _i9 = 0; _i9 < _map8.Count; ++_i9)
                {
                  string _key10;
                  string _val11;
                  _key10 = iprot.ReadString();
                  _val11 = iprot.ReadString();
                  Attributes[_key10] = _val11;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.String) {
              AppId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.String) {
              HostName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.I64) {
              ProcessId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_name)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_serviceName)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_hostIp)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_spanType)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_traceId)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_spanId)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_parentId)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_startTime)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_stopTime)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_logEvents)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_unfinished)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_threadId)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Span");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "name";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Name);
      oprot.WriteFieldEnd();
      field.Name = "serviceName";
      field.Type = TType.String;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(ServiceName);
      oprot.WriteFieldEnd();
      field.Name = "hostIp";
      field.Type = TType.String;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(HostIp);
      oprot.WriteFieldEnd();
      field.Name = "spanType";
      field.Type = TType.I32;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32((int)SpanType);
      oprot.WriteFieldEnd();
      field.Name = "traceId";
      field.Type = TType.I64;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(TraceId);
      oprot.WriteFieldEnd();
      field.Name = "spanId";
      field.Type = TType.I64;
      field.ID = 6;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(SpanId);
      oprot.WriteFieldEnd();
      field.Name = "parentId";
      field.Type = TType.I64;
      field.ID = 7;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(ParentId);
      oprot.WriteFieldEnd();
      field.Name = "startTime";
      field.Type = TType.I64;
      field.ID = 8;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(StartTime);
      oprot.WriteFieldEnd();
      field.Name = "stopTime";
      field.Type = TType.I64;
      field.ID = 9;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(StopTime);
      oprot.WriteFieldEnd();
      field.Name = "logEvents";
      field.Type = TType.List;
      field.ID = 10;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Struct, LogEvents.Count));
        foreach (LogEvent _iter12 in LogEvents)
        {
          _iter12.Write(oprot);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      field.Name = "unfinished";
      field.Type = TType.Bool;
      field.ID = 11;
      oprot.WriteFieldBegin(field);
      oprot.WriteBool(Unfinished);
      oprot.WriteFieldEnd();
      field.Name = "threadId";
      field.Type = TType.I64;
      field.ID = 12;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(ThreadId);
      oprot.WriteFieldEnd();
      if (__isset.sequenceNo) {
        field.Name = "sequenceNo";
        field.Type = TType.I64;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SequenceNo);
        oprot.WriteFieldEnd();
      }
      if (Route != null && __isset.route) {
        field.Name = "route";
        field.Type = TType.String;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Route);
        oprot.WriteFieldEnd();
      }
      if (Attributes != null && __isset.attributes) {
        field.Name = "attributes";
        field.Type = TType.Map;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, Attributes.Count));
          foreach (string _iter13 in Attributes.Keys)
          {
            oprot.WriteString(_iter13);
            oprot.WriteString(Attributes[_iter13]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (AppId != null && __isset.appId) {
        field.Name = "appId";
        field.Type = TType.String;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AppId);
        oprot.WriteFieldEnd();
      }
      if (HostName != null && __isset.hostName) {
        field.Name = "hostName";
        field.Type = TType.String;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(HostName);
        oprot.WriteFieldEnd();
      }
      if (__isset.processId) {
        field.Name = "processId";
        field.Type = TType.I64;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ProcessId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Span(");
      __sb.Append(", Name: ");
      __sb.Append(Name);
      __sb.Append(", ServiceName: ");
      __sb.Append(ServiceName);
      __sb.Append(", HostIp: ");
      __sb.Append(HostIp);
      __sb.Append(", SpanType: ");
      __sb.Append(SpanType);
      __sb.Append(", TraceId: ");
      __sb.Append(TraceId);
      __sb.Append(", SpanId: ");
      __sb.Append(SpanId);
      __sb.Append(", ParentId: ");
      __sb.Append(ParentId);
      __sb.Append(", StartTime: ");
      __sb.Append(StartTime);
      __sb.Append(", StopTime: ");
      __sb.Append(StopTime);
      __sb.Append(", LogEvents: ");
      __sb.Append(LogEvents);
      __sb.Append(", Unfinished: ");
      __sb.Append(Unfinished);
      __sb.Append(", ThreadId: ");
      __sb.Append(ThreadId);
      if (__isset.sequenceNo) {
        __sb.Append(", SequenceNo: ");
        __sb.Append(SequenceNo);
      }
      if (Route != null && __isset.route) {
        __sb.Append(", Route: ");
        __sb.Append(Route);
      }
      if (Attributes != null && __isset.attributes) {
        __sb.Append(", Attributes: ");
        __sb.Append(Attributes);
      }
      if (AppId != null && __isset.appId) {
        __sb.Append(", AppId: ");
        __sb.Append(AppId);
      }
      if (HostName != null && __isset.hostName) {
        __sb.Append(", HostName: ");
        __sb.Append(HostName);
      }
      if (__isset.processId) {
        __sb.Append(", ProcessId: ");
        __sb.Append(ProcessId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
