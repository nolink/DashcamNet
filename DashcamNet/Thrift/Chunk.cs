/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace DashcamNet.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Chunk : TBase
  {
    private long _processId;
    private long _sequenceNo;
    private string _route;

    public string HostIp { get; set; }

    public string HostName { get; set; }

    public int AppId { get; set; }

    public long ProcessId
    {
      get
      {
        return _processId;
      }
      set
      {
        __isset.processId = true;
        this._processId = value;
      }
    }

    public List<LogEvent> LogEvents { get; set; }

    public List<Span> Spans { get; set; }

    public List<MetricEvent> Metrics { get; set; }

    public List<@Event> Events { get; set; }

    public long SequenceNo
    {
      get
      {
        return _sequenceNo;
      }
      set
      {
        __isset.sequenceNo = true;
        this._sequenceNo = value;
      }
    }

    public string Route
    {
      get
      {
        return _route;
      }
      set
      {
        __isset.route = true;
        this._route = value;
      }
    }

    public string Env { get; set; }

    public string EnvGroup { get; set; }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool processId;
      public bool sequenceNo;
      public bool route;
    }

    public Chunk() {
    }

    public Chunk(string hostIp, string hostName, int appId, List<LogEvent> logEvents, List<Span> spans, List<MetricEvent> metrics, List<@Event> events, string env, string envGroup) : this() {
      this.HostIp = hostIp;
      this.HostName = hostName;
      this.AppId = appId;
      this.LogEvents = logEvents;
      this.Spans = spans;
      this.Metrics = metrics;
      this.Events = events;
      this.Env = env;
      this.EnvGroup = envGroup;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_hostIp = false;
      bool isset_hostName = false;
      bool isset_appId = false;
      bool isset_logEvents = false;
      bool isset_spans = false;
      bool isset_metrics = false;
      bool isset_events = false;
      bool isset_env = false;
      bool isset_envGroup = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              HostIp = iprot.ReadString();
              isset_hostIp = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              HostName = iprot.ReadString();
              isset_hostName = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              AppId = iprot.ReadI32();
              isset_appId = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              ProcessId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                LogEvents = new List<LogEvent>();
                TList _list23 = iprot.ReadListBegin();
                for( int _i24 = 0; _i24 < _list23.Count; ++_i24)
                {
                  LogEvent _elem25;
                  _elem25 = new LogEvent();
                  _elem25.Read(iprot);
                  LogEvents.Add(_elem25);
                }
                iprot.ReadListEnd();
              }
              isset_logEvents = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                Spans = new List<Span>();
                TList _list26 = iprot.ReadListBegin();
                for( int _i27 = 0; _i27 < _list26.Count; ++_i27)
                {
                  Span _elem28;
                  _elem28 = new Span();
                  _elem28.Read(iprot);
                  Spans.Add(_elem28);
                }
                iprot.ReadListEnd();
              }
              isset_spans = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                Metrics = new List<MetricEvent>();
                TList _list29 = iprot.ReadListBegin();
                for( int _i30 = 0; _i30 < _list29.Count; ++_i30)
                {
                  MetricEvent _elem31;
                  _elem31 = new MetricEvent();
                  _elem31.Read(iprot);
                  Metrics.Add(_elem31);
                }
                iprot.ReadListEnd();
              }
              isset_metrics = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.List) {
              {
                Events = new List<@Event>();
                TList _list32 = iprot.ReadListBegin();
                for( int _i33 = 0; _i33 < _list32.Count; ++_i33)
                {
                  @Event _elem34;
                  _elem34 = new @Event();
                  _elem34.Read(iprot);
                  Events.Add(_elem34);
                }
                iprot.ReadListEnd();
              }
              isset_events = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I64) {
              SequenceNo = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              Route = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              Env = iprot.ReadString();
              isset_env = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              EnvGroup = iprot.ReadString();
              isset_envGroup = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_hostIp)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_hostName)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_appId)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_logEvents)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_spans)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_metrics)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_events)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_env)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_envGroup)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Chunk");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "hostIp";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(HostIp);
      oprot.WriteFieldEnd();
      field.Name = "hostName";
      field.Type = TType.String;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(HostName);
      oprot.WriteFieldEnd();
      field.Name = "appId";
      field.Type = TType.I32;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(AppId);
      oprot.WriteFieldEnd();
      if (__isset.processId) {
        field.Name = "processId";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ProcessId);
        oprot.WriteFieldEnd();
      }
      field.Name = "logEvents";
      field.Type = TType.List;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Struct, LogEvents.Count));
        foreach (LogEvent _iter35 in LogEvents)
        {
          _iter35.Write(oprot);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      field.Name = "spans";
      field.Type = TType.List;
      field.ID = 6;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Struct, Spans.Count));
        foreach (Span _iter36 in Spans)
        {
          _iter36.Write(oprot);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      field.Name = "metrics";
      field.Type = TType.List;
      field.ID = 7;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Struct, Metrics.Count));
        foreach (MetricEvent _iter37 in Metrics)
        {
          _iter37.Write(oprot);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      field.Name = "events";
      field.Type = TType.List;
      field.ID = 8;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Struct, Events.Count));
        foreach (@Event _iter38 in Events)
        {
          _iter38.Write(oprot);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (__isset.sequenceNo) {
        field.Name = "sequenceNo";
        field.Type = TType.I64;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SequenceNo);
        oprot.WriteFieldEnd();
      }
      if (Route != null && __isset.route) {
        field.Name = "route";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Route);
        oprot.WriteFieldEnd();
      }
      field.Name = "env";
      field.Type = TType.String;
      field.ID = 11;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Env);
      oprot.WriteFieldEnd();
      field.Name = "envGroup";
      field.Type = TType.String;
      field.ID = 12;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(EnvGroup);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Chunk(");
      __sb.Append(", HostIp: ");
      __sb.Append(HostIp);
      __sb.Append(", HostName: ");
      __sb.Append(HostName);
      __sb.Append(", AppId: ");
      __sb.Append(AppId);
      if (__isset.processId) {
        __sb.Append(", ProcessId: ");
        __sb.Append(ProcessId);
      }
      __sb.Append(", LogEvents: ");
      __sb.Append(LogEvents);
      __sb.Append(", Spans: ");
      __sb.Append(Spans);
      __sb.Append(", Metrics: ");
      __sb.Append(Metrics);
      __sb.Append(", Events: ");
      __sb.Append(Events);
      if (__isset.sequenceNo) {
        __sb.Append(", SequenceNo: ");
        __sb.Append(SequenceNo);
      }
      if (Route != null && __isset.route) {
        __sb.Append(", Route: ");
        __sb.Append(Route);
      }
      __sb.Append(", Env: ");
      __sb.Append(Env);
      __sb.Append(", EnvGroup: ");
      __sb.Append(EnvGroup);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
