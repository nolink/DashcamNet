/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace DashcamNet.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class LogEvent : TBase
  {
    private long _createdTime;
    private long _threadId;
    private long _traceId;
    private LogLevel _logLevel;
    private Dictionary<string, string> _attributes;
    private string _title;
    private string _message;
    private string _source;
    private long _sequenceNo;
    private string _route;
    private long _spanId;

    public long Id { get; set; }

    /// <summary>
    /// 
    /// <seealso cref="LogType"/>
    /// </summary>
    public LogType LogType { get; set; }

    public long CreatedTime
    {
      get
      {
        return _createdTime;
      }
      set
      {
        __isset.createdTime = true;
        this._createdTime = value;
      }
    }

    public long ThreadId
    {
      get
      {
        return _threadId;
      }
      set
      {
        __isset.threadId = true;
        this._threadId = value;
      }
    }

    public long TraceId
    {
      get
      {
        return _traceId;
      }
      set
      {
        __isset.traceId = true;
        this._traceId = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="LogLevel"/>
    /// </summary>
    public LogLevel LogLevel
    {
      get
      {
        return _logLevel;
      }
      set
      {
        __isset.logLevel = true;
        this._logLevel = value;
      }
    }

    public Dictionary<string, string> Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }

    public string Title
    {
      get
      {
        return _title;
      }
      set
      {
        __isset.title = true;
        this._title = value;
      }
    }

    public string Message
    {
      get
      {
        return _message;
      }
      set
      {
        __isset.message = true;
        this._message = value;
      }
    }

    public string Source
    {
      get
      {
        return _source;
      }
      set
      {
        __isset.source = true;
        this._source = value;
      }
    }

    public long SequenceNo
    {
      get
      {
        return _sequenceNo;
      }
      set
      {
        __isset.sequenceNo = true;
        this._sequenceNo = value;
      }
    }

    public string Route
    {
      get
      {
        return _route;
      }
      set
      {
        __isset.route = true;
        this._route = value;
      }
    }

    public long SpanId
    {
      get
      {
        return _spanId;
      }
      set
      {
        __isset.spanId = true;
        this._spanId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool createdTime;
      public bool threadId;
      public bool traceId;
      public bool logLevel;
      public bool attributes;
      public bool title;
      public bool message;
      public bool source;
      public bool sequenceNo;
      public bool route;
      public bool spanId;
    }

    public LogEvent() {
      this.Id = -1;
    }

    public LogEvent(long id, LogType logType) : this() {
      this.Id = id;
      this.LogType = logType;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_id = false;
      bool isset_logType = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Id = iprot.ReadI64();
              isset_id = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              LogType = (LogType)iprot.ReadI32();
              isset_logType = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              CreatedTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              ThreadId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              TraceId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              LogLevel = (LogLevel)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Map) {
              {
                Attributes = new Dictionary<string, string>();
                TMap _map0 = iprot.ReadMapBegin();
                for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
                {
                  string _key2;
                  string _val3;
                  _key2 = iprot.ReadString();
                  _val3 = iprot.ReadString();
                  Attributes[_key2] = _val3;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              Title = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              Message = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              Source = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I64) {
              SequenceNo = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              Route = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I64) {
              SpanId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_id)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_logType)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("LogEvent");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "id";
      field.Type = TType.I64;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(Id);
      oprot.WriteFieldEnd();
      field.Name = "logType";
      field.Type = TType.I32;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32((int)LogType);
      oprot.WriteFieldEnd();
      if (__isset.createdTime) {
        field.Name = "createdTime";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreatedTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.threadId) {
        field.Name = "threadId";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ThreadId);
        oprot.WriteFieldEnd();
      }
      if (__isset.traceId) {
        field.Name = "traceId";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(TraceId);
        oprot.WriteFieldEnd();
      }
      if (__isset.logLevel) {
        field.Name = "logLevel";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)LogLevel);
        oprot.WriteFieldEnd();
      }
      if (Attributes != null && __isset.attributes) {
        field.Name = "attributes";
        field.Type = TType.Map;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, Attributes.Count));
          foreach (string _iter4 in Attributes.Keys)
          {
            oprot.WriteString(_iter4);
            oprot.WriteString(Attributes[_iter4]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Title != null && __isset.title) {
        field.Name = "title";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Title);
        oprot.WriteFieldEnd();
      }
      if (Message != null && __isset.message) {
        field.Name = "message";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Message);
        oprot.WriteFieldEnd();
      }
      if (Source != null && __isset.source) {
        field.Name = "source";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Source);
        oprot.WriteFieldEnd();
      }
      if (__isset.sequenceNo) {
        field.Name = "sequenceNo";
        field.Type = TType.I64;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SequenceNo);
        oprot.WriteFieldEnd();
      }
      if (Route != null && __isset.route) {
        field.Name = "route";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Route);
        oprot.WriteFieldEnd();
      }
      if (__isset.spanId) {
        field.Name = "spanId";
        field.Type = TType.I64;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SpanId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("LogEvent(");
      __sb.Append(", Id: ");
      __sb.Append(Id);
      __sb.Append(", LogType: ");
      __sb.Append(LogType);
      if (__isset.createdTime) {
        __sb.Append(", CreatedTime: ");
        __sb.Append(CreatedTime);
      }
      if (__isset.threadId) {
        __sb.Append(", ThreadId: ");
        __sb.Append(ThreadId);
      }
      if (__isset.traceId) {
        __sb.Append(", TraceId: ");
        __sb.Append(TraceId);
      }
      if (__isset.logLevel) {
        __sb.Append(", LogLevel: ");
        __sb.Append(LogLevel);
      }
      if (Attributes != null && __isset.attributes) {
        __sb.Append(", Attributes: ");
        __sb.Append(Attributes);
      }
      if (Title != null && __isset.title) {
        __sb.Append(", Title: ");
        __sb.Append(Title);
      }
      if (Message != null && __isset.message) {
        __sb.Append(", Message: ");
        __sb.Append(Message);
      }
      if (Source != null && __isset.source) {
        __sb.Append(", Source: ");
        __sb.Append(Source);
      }
      if (__isset.sequenceNo) {
        __sb.Append(", SequenceNo: ");
        __sb.Append(SequenceNo);
      }
      if (Route != null && __isset.route) {
        __sb.Append(", Route: ");
        __sb.Append(Route);
      }
      if (__isset.spanId) {
        __sb.Append(", SpanId: ");
        __sb.Append(SpanId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
